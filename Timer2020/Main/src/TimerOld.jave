// Author : Sietze Min
// Last modified : 15-10-2020

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Cursor;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundImage;
import javafx.scene.layout.BackgroundPosition;
import javafx.scene.layout.BackgroundRepeat;
import javafx.scene.layout.BackgroundSize;
import javafx.scene.layout.GridPane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.stage.Stage;

public class Timer extends Application {

    // Date/Time variables
    SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
    private String dateString = format.format(new Date());
    private int minute = 00;
    private int hour, second = 0;
    private boolean check = false;
    public boolean backgroundCheck = false;
    public boolean isDay = true;
    ArrayList<Label> starsList = new ArrayList<Label>();

    BackgroundImage background_image_day = new BackgroundImage(
            new Image(getClass().getResourceAsStream("images/background_day.png")), BackgroundRepeat.REPEAT,
            BackgroundRepeat.NO_REPEAT, BackgroundPosition.DEFAULT, BackgroundSize.DEFAULT);

    BackgroundImage background_image_night = new BackgroundImage(
            new Image(getClass().getResourceAsStream("images/background_night.png")), BackgroundRepeat.REPEAT,
            BackgroundRepeat.NO_REPEAT, BackgroundPosition.DEFAULT, BackgroundSize.DEFAULT);

    // Buton styles
    final String BTN_STYLE = "-fx-background-color: #45748a; -fx-border-solid: 2px; -fx-border-color: #244a5c;";
    final String BTN_HOVER_STYLE = "-fx-background-color: #02567d; -fx-cursor: hand";

    // simple getter method
    public boolean getBooleanValue(boolean b){
        return backgroundCheck;
    }

    public boolean setBooleanValue(boolean b){
        if(backgroundCheck == true){
            backgroundCheck = false;
        } else {
            backgroundCheck = true;
        }
        return backgroundCheck;
    }

    public void setIsDay(boolean b, int i){
        
        // it is between 06:00 and 08:00
        if (i == 0) {
            // switch from night to day
            if (b == false){
                b = true;
            }
        }

        if (i == 1){
            // switch from day to night
            if 

        }
   
    }

    @Override
    public void start(Stage primaryStage) {
        GridPane root = new GridPane();
        root.setBackground(new Background(background_image_day));
        

        Label currentTimeLbl = new Label("00:00:00");
        root.setMargin(currentTimeLbl, new Insets(25, 0, 100, 125));
        currentTimeLbl.setTextFill(Color.web("#ffffff"));
        currentTimeLbl.setFont(Font.font("Cambria", 22));
        root.add(currentTimeLbl, 0, 0);

        Label greetingLbl = new Label("hello world");
        root.setMargin(greetingLbl, new Insets(-175, 0, 0, 85));
        greetingLbl.setTextFill(Color.web("#ffffff"));
        greetingLbl.setFont(Font.font("Cambria", 18));
        root.add(greetingLbl, 0, 1);

        Label motivationalTextLbl = new Label("");
        root.setMargin(motivationalTextLbl, new Insets(-100, 0, 0, 100));
        motivationalTextLbl.setTextFill(Color.web("#ffffff"));
        motivationalTextLbl.setFont(Font.font("Cambria", 22));
        root.add(motivationalTextLbl, 0, 2);

        Button startBtn = new Button("Start timer");
        currentTimeLbl.setPadding(new Insets(25, 0, 50, 0));
        startBtn.setStyle(BTN_STYLE);
        startBtn.setMinWidth(350);
        startBtn.setMinHeight(50);
        startBtn.setOnMouseEntered(e -> startBtn.setStyle(BTN_HOVER_STYLE));
        startBtn.setOnMouseExited(e -> startBtn.setStyle(BTN_STYLE));

        startBtn.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                check = true;
                startBtn.setCursor(Cursor.HAND);
                startBtn.setText("Start timer");
                motivationalTextLbl.setText("You can do it!");
            }
        });
        root.add(startBtn, 0, 3);

        Button pauseBtn = new Button("Pause timer");
        pauseBtn.setMinWidth(175);
        pauseBtn.setStyle(BTN_STYLE);
        pauseBtn.setOnMouseEntered(e -> pauseBtn.setStyle(BTN_HOVER_STYLE));
        pauseBtn.setOnMouseExited(e -> pauseBtn.setStyle(BTN_STYLE));
        pauseBtn.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                check = false;
                motivationalTextLbl.setText("Timer paused");
                startBtn.setText("Resume");
                pauseBtn.setCursor(Cursor.HAND);
            }
        });
        root.add(pauseBtn, 0, 4);

        Button resetBtn = new Button("Reset timer");
        resetBtn.setMinWidth(175);
        resetBtn.setStyle(BTN_STYLE);
        resetBtn.setOnMouseEntered(e -> resetBtn.setStyle(BTN_HOVER_STYLE));
        resetBtn.setOnMouseExited(e -> resetBtn.setStyle(BTN_STYLE));
        root.setMargin(resetBtn, new Insets(0, 0, 0, 175));
        resetBtn.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                check = false;
                second = 0;
                minute = 0;
                hour = 0;
                currentTimeLbl.setText("00:00:00");
                motivationalTextLbl.setText("");
                resetBtn.setCursor(Cursor.HAND);
            }
        });
        root.add(resetBtn, 0, 4);

        // Thread for time
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    while (true) {
                        Platform.runLater(new Runnable() {
                            @Override
                            public void run() {
                                changeBackground(root);
                                changeMotivationalText(greetingLbl);
                                
                                // only if start button is pressed
                                if (check == true) {
                                    updateTime(currentTimeLbl);
                                }

                                // set isDay checker at two times each day
                            }
                        });
                        Thread.sleep(1000);
                    }
                } catch (InterruptedException ex) {
                }
            }
        }).start();

        // Thread for moving stars across the background
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    while (true) {
                        Platform.runLater(new Runnable() {
                            @Override
                            public void run() {
                                animateBackground();
                            }
                        });
                        Thread.sleep(100);
                    }
                } catch (InterruptedException ex) {
                }
            }
        }).start();


        Scene scene = new Scene(root, 350, 350);
        primaryStage.setResizable(false);
        primaryStage.setTitle("StudyTimer");
        primaryStage.setScene(scene);
        primaryStage.show();

    } // end of start method

    public void updateTime(Label label) {
        // Seconden
        if (second < 10) {
            // System.out.println("Updating second : " + second);
            label.setText("0" + String.valueOf(hour) + ":0" + String.valueOf(minute) + ":0" + String.valueOf(second));
            second++;

        }
        if (second >= 10 && second < 60) {
            // System.out.println("Updating second : " + second);
            label.setText("0" + String.valueOf(hour) + ":0" + String.valueOf(minute) + ":" + String.valueOf(second));
            second++;
        }
        //
        if (second == 60) {
            minute++;
            second = 0;
            label.setText("0" + String.valueOf(hour) + ":0" + String.valueOf(minute) + ":0" + String.valueOf(second));
        }

        if (minute != 0 && minute < 10 && second >= 10) {
            label.setText("0" + String.valueOf(hour) + ":0" + String.valueOf(minute) + ":" + String.valueOf(second));
        }
        if (minute >= 10 && minute < 60 && second < 10) {
            label.setText("0" + String.valueOf(hour) + ":" + String.valueOf(minute) + ":0" + String.valueOf(second));
        }
        //
        if (minute == 60) {
            hour++;
            minute = 0;
            second = 0;
            label.setText("0" + String.valueOf(hour) + ":" + String.valueOf(minute) + ":" + String.valueOf(second));
        }
        //
        if (hour < 10 && minute < 10 && second < 10) {
            label.setText("0" + String.valueOf(hour) + ":0" + String.valueOf(minute) + ":0" + String.valueOf(second));
        }

        if (hour >= 10 && minute < 10 && second < 10) {
            label.setText(String.valueOf(hour) + ":0" + String.valueOf(minute) + ":0" + String.valueOf(second));
        }
    }

    public void changeMotivationalText(Label label) {
        int[] hourAr = new int[4];
        hourAr[0] = Integer.valueOf(getCurrentTime().substring(0, 1));
        hourAr[1] = Integer.valueOf(getCurrentTime().substring(1, 2));

        // minutes
        // minuteAr[0] = Integer.valueOf(getCurrentTime().substring(2,1));
        // minuteAr[1] = Integer.calueOf(getcurrentTime().substring(3,1));

        int hourD1 = hourAr[0];
        int hourD2 = hourAr[1];
        int hour = Integer.valueOf(getCurrentTime().substring(0, 2));

        // System.out.println(hourD1 + ":" + hourD2);
        // Message between 06:00 and 08:00
        if (hourD1 == 0 && hourD2 >= 6 && hourD2 < 8) {
            label.setText("Your'e an early bird");
            System.out.println("Early bird");

   
        if (hour >= 10 && hour < 12){
            label.setText("Good morning Sietze");
        }
  
        // Message between 12:00 and 18:00
        if (hour >= 12 && hour < 18) {
            label.setText("Good afternoon Sietze");
            // System.out.println("Good afternoon Sietze")
        }

        // Message between 18:00 and 00:00
        if (hour >= 18 && hour < 24) {
            label.setText("Good evening Sietze");

            // Change boolean isDay to night
            // System.out.println("Good evening Sietze");
        }

        // Message between 00:00 and 06:00
        if (hourD1 == 0 && hourD2 < 6){
            label.setText("Burning the midnight oil");
        }
    }

    public void setInitialStars(GridPane pane, int amount){
        // First check if starsList is empty
        for (int i = 0; i < amount; i++) {
            Label starLbl = new Label();
            Image img = new Image("images/star.png");
            ImageView view = new ImageView(img);

            int imageSize = (int) (Math.random() * 10 + 5); // Random image size
            view.setFitHeight(imageSize);
            view.setPreserveRatio(true);
            starLbl.setGraphic(view);

            int initXcoordinate = (int )(Math.random() * 350 + 1);
            int initYcoordinate = (int )(Math.random() * -250 + 1);
    
            starLbl.setTranslateX(initXcoordinate);
            starLbl.setTranslateY(initYcoordinate);
            pane.add(starLbl,0,2);
            starsList.add(starLbl);
          }
        //   System.out.println("function space content : " + starsList.get(0));

    }

    public void changeBackground(GridPane pane) {
        if (Integer.valueOf(getCurrentTime().substring(0, 1)) == 2) {
            pane.setBackground(new Background(background_image_night));

            if (getBooleanValue(backgroundCheck) == false){
                setInitialStars(pane, 10);
                setBooleanValue(backgroundCheck); // changes checkBackground to true
            }

        } else {
            pane.setBackground(new Background(background_image_day));
        }
    }

    public void animateBackground2(){
        // animate both stars and clouds
        // if time = day animati clouds
        // if time = night animate stars


    }
    public void animateBackground(){
        if (starsList.size() != 0){ // if list == 0, inner clause can not happen
            System.out.println("Starslist contents out of function space : " + starsList.get(0));
            for (int i = 0; i < starsList.size(); i++){
                // System.out.println("Coordinates of star :" + i + " : " + starsList.get(i).getTranslateX());
                // System.out.println("Coordinates of star :" + i + " : " + starsList.get(i).getTranslateY());
                
                double oldX = starsList.get(i).getTranslateX();
                // update coordinates
                if(oldX + 1 >= 350){
                    starsList.get(i).setTranslateX(0); // if star x-coordinate is bigger than screenwidth, reset to 0. 
                } else {
                    starsList.get(i).setTranslateX(oldX + 0.25);
                }
            }
        }
    }

    public String getCurrentTime() {
        String timeSecond = new String(String.valueOf(LocalDateTime.now().getSecond()));
        String timeMinute = new String(String.valueOf(LocalDateTime.now().getMinute()));
        String timeHour = new String(String.valueOf(LocalDateTime.now().getHour()));
        return timeHour + ":" + timeMinute + ":" + timeSecond;
    }

    public void showView() {
        Timer.launch();
    }

}
